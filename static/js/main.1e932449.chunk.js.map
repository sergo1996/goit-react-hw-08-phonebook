{"version":3,"sources":["redux/auth/authSelectors.js","redux/auth/authReduser.js","redux/contacts/contactsReducers.js","components/UserMenu/UserMenu.module.css","components/Logo/Logo.module.css","components/Navigation/Navigation.module.css","redux/contacts/contactsSelectors.js","redux/auth/authOperations.js","redux/contacts/contactsOperations.js","components/Logo/Logo.js","redux/auth/authActions.js","redux/contacts/index.js","components/transitions.module.css","redux/contacts/contactsActions.js","components/Route/PrivateRoute.js","components/Route/PublicRoute.js","components/Navigation/Navigation.js","components/UserMenu/UserMenu.js","components/AuthMenu/AuthMenu.js","components/AppBar/AppBar.js","components/Layout/Layout.js","routes.js","components/App.js","redux/store.js","index.js"],"names":["isAuthenticated","state","auth","token","getUserName","user","name","initialUserState","email","createReducer","authActions","registerSuccess","_","payload","loginSuccess","logoutSuccess","getCurrentUserSuccess","error","registerError","loginError","logoutError","getCurrentUserError","combineReducers","items","contactsActions","fetchContactsSuccess","action","addContactSuccess","removeContactSuccess","filter","contact","id","changeFilter","loading","addContactRequest","addContactError","fetchContactsRequest","fetchContactsError","removeContactRequest","removeContactError","module","exports","getContacts","contacts","getFilter","getVisibleContacts","createSelector","toLowerCase","includes","getContactById","contactId","find","item","getLoading","axios","defaults","baseURL","headers","common","Authorization","register","credentials","dispatch","registerRequest","post","then","response","data","catch","login","loginRequest","logout","logoutRequest","getCurrentUser","getState","persistedToken","getCurrentUserRequest","get","addContact","number","fetchContacts","removeContact","delete","Logo","className","styles","logo","in","appear","classNames","transitions","timeout","title","createAction","connect","authSelectors","Component","component","routeProps","render","props","to","restricted","exact","link","activeClassName","activeLink","mapDispatchToProps","onLogout","authOperations","menu","onClick","btn","display","textDecoration","padding","fontWeight","color","AuthMenu","style","activeStyle","header","container","width","Layout","children","lazy","require","path","label","private","App","this","onGetCurrentUser","fallback","isLoadingContacts","routes","map","route","contactsSelectors","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","contactsReducer","persistReducer","authReduser","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1e932449.chunk.js","sourcesContent":["const isAuthenticated = state => state.auth.token\n\nconst getUserName = state => state.auth.user.name\n\nexport default {isAuthenticated, getUserName }","import {combineReducers} from 'redux'\nimport {createReducer} from '@reduxjs/toolkit'\nimport authActions from './authActions' \n\nconst initialUserState = {name: null, email: null}\n\nconst user = createReducer([],{\n    [authActions.registerSuccess]:(_, {payload}) => payload.user,\n    [authActions.loginSuccess]: (_, {payload}) => payload.user,\n    [authActions.logoutSuccess]: () => initialUserState,\n    [authActions.getCurrentUserSuccess]: (_, {payload}) => payload \n})\n\nconst token = createReducer(null,{\n    [authActions.registerSuccess]: (_, {payload}) => payload.token,\n    [authActions.loginSuccess]:(_, {payload}) => payload.token,\n    [authActions.logoutSuccess]: () => null\n    \n})\n\n\nconst error = createReducer(null,{\n    [authActions.registerError]:(_, {payload}) => payload,\n    [authActions.loginError]:(_, {payload}) => payload,\n    [authActions.logoutError]:(_, {payload}) => payload,\n    [authActions.getCurrentUserError]:(_, {payload}) => payload,\n})\n\n\nexport default combineReducers({\nuser,\ntoken,\nerror\n})","import {combineReducers} from 'redux';\nimport {createReducer} from '@reduxjs/toolkit'\nimport contactsActions from './contactsActions'\n\n\nconst addContact = (state,action) => {\n    return [...state, action.payload]\n};\nconst removeContact = (state, action) => {\n    return state.filter(contact => contact.id !== action.payload)\n} ;\n\nconst items = createReducer([],{\n    [contactsActions.fetchContactsSuccess]: (state,action) => action.payload,\n    [contactsActions.addContactSuccess]: addContact,\n    [contactsActions.removeContactSuccess]: removeContact\n})\n\nconst filter =  createReducer('',{\n    [contactsActions.changeFilter]: (state,action) => action.payload\n})\n\nconst loading = createReducer(false,{\n    [contactsActions.addContactRequest]: () => true,\n    [contactsActions.addContactSuccess]: () => false,\n    [contactsActions.addContactError]: () => false,\n    [contactsActions.fetchContactsRequest]: () => true,\n    [contactsActions.fetchContactsSuccess]: () => false,\n    [contactsActions.fetchContactsError]: () => false,\n    [contactsActions.removeContactRequest]: () => true,\n    [contactsActions.removeContactSuccess]: () => false,\n    [contactsActions.removeContactError]: () => false\n})\n\nexport default combineReducers({\n    items,\n    loading,\n    filter\n})\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"UserMenu_menu__2cDck\",\"title\":\"UserMenu_title__3OGGG\",\"btn\":\"UserMenu_btn__NuYBA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Logo_title__2lsOi\",\"logo\":\"Logo_logo__1CIUZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeLink\":\"Navigation_activeLink__15sMA\"};","import {createSelector} from '@reduxjs/toolkit'\n\nconst getContacts = state => state.contacts.items;\n\nconst getFilter = state => state.contacts.filter;\n\nconst getLoading = state => state.contacts.loading\n\nconst getVisibleContacts = createSelector (\n    [getContacts,getFilter],\n    (contacts, filter) => {\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter))\n})\n\n\nconst getContactById = createSelector(\n    [(state,contactId)=> contactId, getContacts],\n    (contactId,contacts) => contacts.find(item => item.id === contactId))\n\n\nexport default { getFilter,getLoading, getVisibleContacts, getContactById}\n","import axios from 'axios';\nimport authActions from './authActions';\n\n\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com'\n\nconst token = {\n    set(token) {\n      axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    },\n    unset() {\n      axios.defaults.headers.common.Authorization = '';\n    },\n  };\n\nconst register = credentials => dispatch => {\n    dispatch(authActions.registerRequest())\n\n    axios\n    .post('/users/signup', credentials)\n    .then(response => {\n        token.set(response.data.token)\n        dispatch(authActions.registerSuccess(response.data))})\n    .catch(error => dispatch(authActions.registerError(error)))\n\n}\n\nconst login = credentials => dispatch => {\n    dispatch(authActions.loginRequest())\n\n    axios\n    .post('/users/login', credentials)\n    .then(response => {\n        token.set(response.data.token)\n        dispatch(authActions.loginSuccess(response.data))\n    })\n    .catch(error => dispatch(authActions.loginError(error)))\n\n}\n\n\nconst logout = () => dispatch => {\n    dispatch(authActions.logoutRequest());\n  \n    axios\n      .post('/users/logout')\n      .then(() => {\n        token.unset();\n        dispatch(authActions.logoutSuccess());\n      })\n      .catch(error => dispatch(authActions.logoutError(error)));\n  };\n\nconst getCurrentUser = () => (dispatch, getState) => {\n    const {\n        auth: {token: persistedToken} \n    } = getState()\n\n    if (!persistedToken ){\n        return\n    }\n\n    token.set(persistedToken)\n    dispatch(authActions.getCurrentUserRequest())\n\n    axios\n    .get('/users/current')\n    .then(({data}) => dispatch(authActions.getCurrentUserSuccess(data)))\n    .catch(error => dispatch(authActions.getCurrentUserError(error)))\n}\n\n\n\n\nexport default {\n    register,\n    login,\n    logout,\n    getCurrentUser\n}\n","import axios from 'axios'\nimport contactsActions from './contactsActions'\n\n// axios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com'\n\nconst addContact = (name,number) => dispatch =>{\n    dispatch(contactsActions.addContactRequest())\n\n    axios\n    .post('/contacts', {name,number})\n    .then(({data}) => dispatch(contactsActions.addContactSuccess(data)))\n    .catch(error => dispatch(contactsActions.addContactError(error)))\n\n}\n\nconst fetchContacts = () => dispatch => {\n    dispatch(contactsActions.fetchContactsRequest());\n\n    axios\n    .get('/contacts')\n    .then(({data}) => dispatch(contactsActions.fetchContactsSuccess(data)))\n    .catch(error => dispatch(contactsActions.fetchContactsError(error)))\n}\n\n\n\nconst removeContact = id => dispatch =>{\n\n    dispatch(contactsActions.removeContactRequest())\n\n    axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(contactsActions.removeContactSuccess(id)))\n    .catch(error => dispatch(contactsActions.removeContactError(error)))\n\n}\n\nexport default {addContact, fetchContacts, removeContact}","import React from 'react'\nimport styles from './Logo.module.css'\nimport { CSSTransition} from 'react-transition-group'\nimport transitions from '../transitions.module.css'\n\n\nconst Logo = ({name}) => (\n    <div className={styles.logo}>\n    <CSSTransition in={true} appear={true} classNames={transitions} timeout={500} >\n    <h1 className={styles.title}>{name}</h1>\n    </CSSTransition>\n    </div>\n)\n\nexport default Logo;","import {createAction} from '@reduxjs/toolkit'\n\nconst registerRequest = createAction('auth/registerRequest')\nconst registerSuccess = createAction('auth/registerSuccess')\nconst registerError = createAction('auth/registerError')\n\nconst loginRequest = createAction('auth/loginRequest')\nconst loginSuccess = createAction('auth/loginSuccess')\nconst loginError = createAction('auth/loginError')\n\nconst logoutRequest = createAction('auth/logoutRequest')\nconst logoutSuccess = createAction('auth/logoutSuccess')\nconst logoutError = createAction('auth/logoutError')\n\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest')\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess')\nconst getCurrentUserError = createAction('auth/getCurrentUserError')\n\n\nexport default {\n    registerRequest,\n    registerSuccess,\n    registerError,\n    loginRequest,\n    loginSuccess,\n    loginError,\n    logoutRequest,\n    logoutSuccess,\n    logoutError,\n    getCurrentUserRequest,\n    getCurrentUserSuccess,\n    getCurrentUserError\n}","export  {default as contactsOperations} from './contactsOperations'\nexport  {default as contactsReducers} from './contactsReducers'\nexport  {default as contactsSelectors} from './contactsSelectors'","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"transitions_appear__29EJg\",\"appearActive\":\"transitions_appearActive__1LkTH\"};","import {createAction} from '@reduxjs/toolkit'\n\nconst addContactRequest = createAction('contacts/addRequest');\nconst addContactSuccess = createAction('contacts/addSuccess');\nconst addContactError = createAction('contacts/addError');\n\nconst fetchContactsRequest = createAction('contacts/fetchRequest')\nconst fetchContactsSuccess = createAction('contacts/fetchSuccess')\nconst fetchContactsError = createAction('contacts/fetchError')\n\nconst removeContactRequest = createAction('contacts/removeRequest')\nconst removeContactSuccess = createAction('contacts/removeSuccess')\nconst removeContactError = createAction('contacts/removeError')\n\nconst changeFilter = createAction('contacts/filter')\n\nexport default {\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    fetchContactsRequest,\n    fetchContactsSuccess,\n    fetchContactsError,\n    removeContactRequest,\n    removeContactSuccess,\n    removeContactError,\n    changeFilter\n}","import React from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport {authSelectors} from '../../redux/auth'\n\nconst PrivateRoute = ({\n    isAuthenticated, \n    component: Component, \n    ...routeProps\n    }) =>( \n        <Route\n            {...routeProps}\n            render={props => \n            isAuthenticated ? <Component {...props}/> : <Redirect to='/login'/>\n            }\n        />\n    );\n\nconst mapStateToProps = state => ({\n    isAuthenticated: authSelectors.isAuthenticated(state)\n  })\n\nexport default connect(mapStateToProps)(PrivateRoute)","import React from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport {authSelectors} from '../../redux/auth'\n\nconst PublicRoute = ({\n    isAuthenticated, \n    component: Component, \n    ...routeProps}) => (\n        <Route\n        {...routeProps}\n        render={props=>\n            isAuthenticated && routeProps.restricted ? \n            <Redirect to='/contacts'/> :  \n            <Component {...props}/>\n        }\n        />\n    );\n\nconst mapStateToProps = state => ({\n    isAuthenticated: authSelectors.isAuthenticated(state)\n  })\n\n\nexport default connect(mapStateToProps)(PublicRoute)","import React from 'react'\nimport { connect } from 'react-redux';\nimport {NavLink} from 'react-router-dom'\nimport {authSelectors} from '../../redux/auth'\nimport Logo from '../Logo/Logo'\nimport styles from './Navigation.module.css'\n\n// const styles = {\n//     link: {\n//       display: 'inline-block',\n//       textDecoration: 'none',\n//       padding: 12,\n//       fontWeight: 700,\n//       color: '#2A363B',\n//     },\n//     activeLink: {\n//       color: '#4267B2',\n//     },\n//   };\n\nconst Navigation = ({isAuthenticated}) => (\n    <nav>\n    { isAuthenticated ?\n      <NavLink\n      exact\n      to='/contacts'\n      className={styles.link}\n      activeClassName={styles.activeLink}\n      >\n          Contacts\n      </NavLink> :\n      <Logo name={'Phonebook'}/>\n    }\n        \n    </nav>\n)\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.isAuthenticated(state)\n})\n\nexport default connect(mapStateToProps)(Navigation)","import React from 'react'\nimport { connect } from 'react-redux'\nimport styles from './UserMenu.module.css'\nimport {authSelectors, authOperations} from '../../redux/auth'\n\nconst UserMenu = ({name, onLogout}) => {\n    return (\n    <div className={styles.menu}>\n        <span className={styles.title}> Welcome, {name}</span>\n        <button \n        onClick={onLogout}\n        className={styles.btn}\n        >Log out</button>\n    </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    name: authSelectors.getUserName(state)\n})\nconst mapDispatchToProps ={\n    onLogout: authOperations.logout,\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(UserMenu)\n\n\n","import React from 'react'\nimport {NavLink} from 'react-router-dom'\n\nconst styles = {\n    link: {\n      display: 'inline-block',\n      textDecoration: 'none',\n      padding: 12,\n      fontWeight: 700,\n      color: '#2A363B',\n    },\n    activeLink: {\n      color: '#4267B2',\n    },\n  };\n\nconst AuthMenu = () => (\n    <nav>\n        \n        <NavLink\n        exact\n        to='/register'\n        style={styles.link}\n        activeStyle={styles.activeLink}\n        >\n            Register\n        </NavLink>\n\n        <NavLink\n        exact\n        to='/login'\n        style={styles.link}\n        activeStyle={styles.activeLink}\n        >\n            Log in\n        </NavLink>\n        \n    </nav>\n)\n\nexport default AuthMenu","import React from 'react';\nimport { connect } from 'react-redux';\nimport Navigation from '../Navigation/Navigation';\nimport UserMenu from '../UserMenu/UserMenu';\nimport AuthMenu from '../AuthMenu/AuthMenu'\nimport {authSelectors} from '../../redux/auth'\nimport styles from './AppBar.module.css'\n\nconst AppBar = ({isAuthenticated}) =>(\n  <header style={styles.header}>\n    <Navigation />\n    {isAuthenticated ? <UserMenu/> : <AuthMenu/>}\n  </header>\n);\n\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.isAuthenticated(state)\n});\n\nexport default connect(mapStateToProps)(AppBar);\n","import React from 'react';\nimport AppBar from '../AppBar/AppBar';\n\nconst styles = {\n  container: {\n    width: '800px',\n    //   marginLeft: 'auto',\n    //   marginRight: 'auto',\n    padding: '30px',\n  },\n};\n\nconst Layout = ({ children }) => (\n  <div style={styles.container}>\n    <AppBar />\n    {children}\n  </div>\n);\n\nexport default Layout;\n","const {lazy } = require(\"react\")\n\nexport default [\n\n    {\n        path:'/register',\n        label: 'Register',\n        exact: true,\n        restricted: true,\n        private:false,\n        component: lazy(() => import('./views/RegisterView')), \n    },\n    {\n        path:'/login',\n        label: 'Login',\n        exact: true,\n        restricted: true,\n        private:false,\n        component: lazy(() => import('./views/LoginView'))\n    },\n    {\n        path:'/contacts',\n        label: 'Contacts',\n        exact: true,\n        restricted: false,\n        private:true,\n        component: lazy(() => import('./views/ContactsView.js'))\n    },    \n]\n","import React, {Component, Suspense} from 'react';\nimport {connect} from 'react-redux'\nimport {BrowserRouter, Switch} from 'react-router-dom'\nimport {authOperations, authSelectors} from '../redux/auth'\nimport {contactsSelectors} from '../redux/contacts'\nimport {PrivateRoute, PublicRoute} from './Route'\nimport Layout from './Layout/Layout'\nimport routes from '../routes'\n\n\nclass App  extends Component {\n\n  componentDidMount(){\n    this.props.onGetCurrentUser()\n  }\n \n  render(){\n    return (\n      <BrowserRouter>\n        <Suspense fallback={<h1>LOADING...</h1>}>\n          <Layout>\n            {this.props.isLoadingContacts && <h1> LOADING...</h1>}\n              <Switch>\n                  {routes.map(route => \n                    route.private ?  \n                    <PrivateRoute key={route.path} {...route}/> : \n                    <PublicRoute \n                    key={route.path} \n                    {...route} \n                    restricted={route.restricted}/>\n                  )}\n              </Switch>\n          </Layout>\n        </Suspense>\n    </BrowserRouter>\n  )}\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state) ,\n  isAuthenticated: authSelectors.isAuthenticated(state)\n})\n\nconst mapDispatchToProps = {\n  onGetCurrentUser: authOperations.getCurrentUser,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\nimport {\n    persistStore,\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n  } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'\nimport contactsReducer from './contacts/contactsReducers'\nimport authReduser from './auth/authReduser'\n\nconst authPersistConfig = {\n    key: 'auth',\n    storage,\n    whitelist:['token']\n};\n\n\nexport const store = configureStore({\n    reducer:{ \n        contacts: contactsReducer,\n        auth : persistReducer(authPersistConfig,authReduser)\n    },\n    middleware: getDefaultMiddleware({\n        serializableCheck: {\n          ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n        }),\n})\n\nexport const persistor = persistStore(store)\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport './index.css';\nimport App from './components/App'\nimport {store, persistor} from './redux/store'\n\n\n\nReactDOM.render(\n  \n  \n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}